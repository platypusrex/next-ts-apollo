{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\n/** Dummy user data. */\nexport var dataArray = [{\n  id: 101,\n  name: 'Alice'\n}, {\n  id: 102,\n  name: 'Bob'\n}, {\n  id: 103,\n  name: 'Caroline'\n}, {\n  id: 104,\n  name: 'Dave'\n}];\n/**\n * Calls a mock API which finds a user by ID from the list above.\n *\n * Throws an error if not found.\n */\n\nexport function findData(_x) {\n  return _findData.apply(this, arguments);\n}\n/** Calls a mock API which returns the above array to simulate \"get all\". */\n\nfunction _findData() {\n  _findData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(id) {\n    var selected;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            selected = dataArray.find(function (data) {\n              return data.id === Number(id);\n            });\n\n            if (selected) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new Error('Cannot find user');\n\n          case 3:\n            return _context.abrupt(\"return\", selected);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _findData.apply(this, arguments);\n}\n\nexport function findAll() {\n  return _findAll.apply(this, arguments);\n}\n\nfunction _findAll() {\n  _findAll = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (_Array$isArray(dataArray)) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw new Error('Cannot find users');\n\n          case 2:\n            return _context2.abrupt(\"return\", dataArray);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _findAll.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}