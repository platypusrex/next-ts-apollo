{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (typeof window === 'undefined') {\n  global.fetch = fetch;\n}\n\nfunction create(initialState, _ref) {\n  var getToken = _ref.getToken,\n      fetchOptions = _ref.fetchOptions;\n  var httpLink = createHttpLink({\n    uri: 'https://api.graph.cool/simple/v1/cj5geu3slxl7t0127y8sity9r',\n    credentials: 'same-origin',\n    fetchOptions: fetchOptions\n  });\n  var authLink = setContext(function (_, _ref2) {\n    var headers = _ref2.headers;\n    var token = getToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? \"Bearer \".concat(token) : ''\n      })\n    };\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  var isBrowser = typeof window !== 'undefined';\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport function initApollo(initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    var fetchOptions = {}; // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n    // 'https-proxy-agent' is required here because it's a sever-side only module\n\n    if (process.env.https_proxy) {\n      fetchOptions = {\n        agent: new (require('https-proxy-agent'))(process.env.https_proxy)\n      };\n    }\n\n    return create(initialState, _objectSpread({}, options, {\n      fetchOptions: fetchOptions\n    }));\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":null,"metadata":{},"sourceType":"module"}