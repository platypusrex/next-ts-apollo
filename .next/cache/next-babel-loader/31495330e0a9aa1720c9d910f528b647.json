{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/frankcooke/Projects/Tests/next-apollo-ts/shared/apollo/withApollo.tsx\";\nimport React from 'react';\nimport cookie from 'cookie';\nimport PropTypes from 'prop-types';\nimport { getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport { initApollo } from './initApollo';\n\n// tslint:disable-next-line no-any\nfunction parseCookies(req) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return cookie.parse(req ? req.headers.cookie || '' : document.cookie, options);\n} // tslint:disable-next-line no-any\n\n\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(WithData, _React$Component);\n\n    _createClass(WithData, null, [{\n      key: \"getInitialProps\",\n      // tslint:disable-next-line no-any\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var Component, router, _ctx$ctx, req, res, apollo, appProps, apolloState;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  Component = ctx.Component, router = ctx.router, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res;\n                  apollo = initApollo({}, {\n                    getToken: function getToken() {\n                      return parseCookies(req).token;\n                    }\n                  });\n                  ctx.ctx.apolloClient = apollo;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 7;\n                  return App.getInitialProps(ctx);\n\n                case 7:\n                  appProps = _context.sent;\n\n                case 8:\n                  if (!(res && res.finished)) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", {});\n\n                case 10:\n                  if (!(typeof window === 'undefined')) {\n                    _context.next = 20;\n                    break;\n                  }\n\n                  _context.prev = 11;\n                  _context.next = 14;\n                  return getDataFromTree(React.createElement(App, _extends({}, appProps, {\n                    Component: Component,\n                    router: router,\n                    apolloClient: apollo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 57\n                    },\n                    __self: this\n                  })));\n\n                case 14:\n                  _context.next = 19;\n                  break;\n\n                case 16:\n                  _context.prev = 16;\n                  _context.t0 = _context[\"catch\"](11);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  // tslint:disable-next-line no-console\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 19:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind();\n\n                case 20:\n                  // Extract query data from the Apollo's store\n                  apolloState = apollo.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 22:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[11, 16]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    // tslint:disable-next-line no-any\n    function WithData(props) {\n      var _this;\n\n      _classCallCheck(this, WithData);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithData).call(this, props)); // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n\n      _defineProperty(_assertThisInitialized(_this), \"apolloClient\", void 0);\n\n      _this.apolloClient = initApollo(props.apolloState, {\n        getToken: function getToken() {\n          return parseCookies().token;\n        }\n      });\n      return _this;\n    }\n\n    _createClass(WithData, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({}, this.props, {\n          apolloClient: this.apolloClient,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return WithData;\n  }(React.Component), _defineProperty(_class, \"displayName\", \"WithData(\".concat(App.displayName, \")\")), _defineProperty(_class, \"propTypes\", {\n    apolloState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["/Users/frankcooke/Projects/Tests/next-apollo-ts/shared/apollo/withApollo.tsx"],"names":["React","cookie","PropTypes","getDataFromTree","Head","initApollo","parseCookies","req","options","parse","headers","document","App","ctx","Component","router","res","apollo","getToken","token","apolloClient","appProps","getInitialProps","finished","window","console","error","rewind","apolloState","cache","extract","props","displayName","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport cookie from 'cookie';\nimport PropTypes from 'prop-types';\nimport { getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport { initApollo } from './initApollo';\nimport { ApolloClient } from 'apollo-boost';\n\n// tslint:disable-next-line no-any\nfunction parseCookies (req?: any, options: {} = {}) {\n  return cookie.parse(req ? req.headers.cookie || '' : document.cookie, options);\n}\n\n// tslint:disable-next-line no-any\nexport default (App: any) => {\n  return class WithData extends React.Component<{}, {}> {\n    static displayName = `WithData(${App.displayName})`;\n    static propTypes = {\n      apolloState: PropTypes.object.isRequired\n    };\n\n    // tslint:disable-next-line no-any\n    static async getInitialProps (ctx: any) {\n      const {\n        Component,\n        router,\n        ctx: { req, res }\n      } = ctx;\n\n      const apollo = initApollo(\n        {},\n        {\n          getToken: () => parseCookies(req).token\n        }\n      );\n\n      ctx.ctx.apolloClient = apollo;\n\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {};\n      }\n\n      if (typeof window === 'undefined') {\n        // Run all graphql queries in the component tree\n        // and extract the resulting data\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          // tslint:disable-next-line no-console\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo's store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState,\n      };\n    }\n\n    apolloClient: ApolloClient<{}>;\n\n    // tslint:disable-next-line no-any\n    constructor (props: any) {\n      super(props);\n      // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return parseCookies().token;\n        }\n      });\n    }\n\n    render () {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}