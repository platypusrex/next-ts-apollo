{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (typeof window === 'undefined') {\n  // tslint:disable-next-line no-any\n  global.fetch = fetch;\n}\n\n// tslint:disable-next-line no-any\nfunction create(initialState, _ref) {\n  var getToken = _ref.getToken,\n      fetchOptions = _ref.fetchOptions;\n  var httpLink = createHttpLink({\n    uri: 'https://localhost:4000/graphql',\n    credentials: 'include',\n    fetchOptions: fetchOptions\n  });\n  var authLink = setContext(function (_, _ref2) {\n    var headers = _ref2.headers;\n    var token = getToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? \"Bearer \".concat(token) : ''\n      })\n    };\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  var isBrowser = typeof window !== 'undefined';\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n} // tslint:disable-next-line no-any\n\n\nexport function initApollo(initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    var fetchOptions = {}; // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n    // 'https-proxy-agent' is required here because it's a sever-side only module\n\n    if (process.env.https_proxy) {\n      fetchOptions = {\n        agent: new (require('https-proxy-agent'))(process.env.https_proxy)\n      };\n    }\n\n    return create(initialState, _objectSpread({}, options, {\n      fetchOptions: fetchOptions\n    }));\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Users/frankcooke/Projects/Tests/next-apollo-ts/shared/apollo/initApollo.ts"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","fetch","apolloClient","window","global","create","initialState","getToken","fetchOptions","httpLink","uri","credentials","authLink","_","headers","token","authorization","isBrowser","connectToDevTools","ssrMode","link","concat","cache","restore","initApollo","options","process","env","https_proxy","agent","require"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,cAA5C;AACA,SAASC,cAAT,QAA6C,kBAA7C;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,YAAqC,GAAG,IAA5C,C,CAEA;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACCC,EAAAA,MAAD,CAAgBH,KAAhB,GAAwBA,KAAxB;AACD;;AAOD;AACA,SAASI,MAAT,CAAiBC,YAAjB,QAA+E;AAAA,MAAzCC,QAAyC,QAAzCA,QAAyC;AAAA,MAA/BC,YAA+B,QAA/BA,YAA+B;AAC7E,MAAMC,QAAQ,GAAGV,cAAc,CAAC;AAC9BW,IAAAA,GAAG,EAAE,gCADyB;AAE9BC,IAAAA,WAAW,EAAE,SAFiB;AAG9BH,IAAAA,YAAY,EAAZA;AAH8B,GAAD,CAA/B;AAMA,MAAMI,QAAQ,GAAGZ,UAAU,CAAC,UAACa,CAAD,SAAoB;AAAA,QAAdC,OAAc,SAAdA,OAAc;AAC9C,QAAMC,KAAK,GAAGR,QAAQ,EAAtB;AACA,WAAO;AACLO,MAAAA,OAAO,oBACFA,OADE;AAELE,QAAAA,aAAa,EAAED,KAAK,oBAAaA,KAAb,IAAuB;AAFtC;AADF,KAAP;AAMD,GAR0B,CAA3B,CAP6E,CAiB7E;;AACA,MAAME,SAAS,GAAG,OAAOd,MAAP,KAAkB,WAApC;AACA,SAAO,IAAIN,YAAJ,CAAiB;AACtBqB,IAAAA,iBAAiB,EAAED,SADG;AAEtBE,IAAAA,OAAO,EAAE,CAACF,SAFY;AAED;AACrBG,IAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBZ,QAAhB,CAHgB;AAItBa,IAAAA,KAAK,EAAE,IAAIxB,aAAJ,GAAoByB,OAApB,CAA4BjB,YAAY,IAAI,EAA5C;AAJe,GAAjB,CAAP;AAMD,C,CAED;;;AACA,OAAO,SAASkB,UAAT,CAAqBlB,YAArB,EAAwCmB,OAAxC,EAAgE;AACrE;AACA;AACA,MAAI,OAAOtB,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAIK,YAAY,GAAG,EAAnB,CADiC,CAEjC;AACA;;AACA,QAAIkB,OAAO,CAACC,GAAR,CAAYC,WAAhB,EAA6B;AAC3BpB,MAAAA,YAAY,GAAG;AACbqB,QAAAA,KAAK,EAAE,KAAKC,OAAO,CAAC,mBAAD,CAAZ,EAAmCJ,OAAO,CAACC,GAAR,CAAYC,WAA/C;AADM,OAAf;AAGD;;AACD,WAAOvB,MAAM,CAACC,YAAD,oBACRmB,OADQ;AAEXjB,MAAAA,YAAY,EAAZA;AAFW,OAAb;AAID,GAhBoE,CAkBrE;;;AACA,MAAI,CAACN,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGG,MAAM,CAACC,YAAD,EAAemB,OAAf,CAArB;AACD;;AAED,SAAOvB,YAAP;AACD","sourcesContent":["import { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { createHttpLink, FetchOptions } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\n\nlet apolloClient: ApolloClient<{}> | null = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (typeof window === 'undefined') {\n  // tslint:disable-next-line no-any\n  (global as any).fetch = fetch;\n}\n\ninterface CreateOptions {\n  getToken: () => string;\n  fetchOptions?: FetchOptions;\n}\n\n// tslint:disable-next-line no-any\nfunction create (initialState: any, { getToken, fetchOptions }: CreateOptions) {\n  const httpLink = createHttpLink({\n    uri: 'https://localhost:4000/graphql',\n    credentials: 'include',\n    fetchOptions,\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    const token = getToken();\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    };\n  });\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  const isBrowser = typeof window !== 'undefined';\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {}),\n  });\n}\n\n// tslint:disable-next-line no-any\nexport function initApollo (initialState: any, options: CreateOptions) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    let fetchOptions = {};\n    // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n    // 'https-proxy-agent' is required here because it's a sever-side only module\n    if (process.env.https_proxy) {\n      fetchOptions = {\n        agent: new (require('https-proxy-agent'))(process.env.https_proxy),\n      };\n    }\n    return create(initialState, {\n      ...options,\n      fetchOptions,\n    });\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}"]},"metadata":{},"sourceType":"module"}