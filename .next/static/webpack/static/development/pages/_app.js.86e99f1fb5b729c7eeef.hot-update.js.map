{"version":3,"file":"static/webpack/static/development/pages/_app.js.86e99f1fb5b729c7eeef.hot-update.js","sources":["webpack:///./shared/apollo/withApollo.tsx"],"sourcesContent":["import React from 'react';\nimport cookie from 'cookie';\nimport PropTypes from 'prop-types';\nimport { getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport { initApollo } from './initApollo';\nimport { ApolloClient } from 'apollo-boost';\n\n// tslint:disable-next-line no-any\nfunction parseCookies (req?: any, options: {} = {}) {\n  return cookie.parse(req ? req.headers.cookie || '' : document.cookie, options);\n}\n\n// tslint:disable-next-line no-any\nexport default (App: any) => {\n  return class WithData extends React.Component<{}, {}> {\n    static displayName = `WithData(${App.displayName})`;\n    static propTypes = {\n      apolloState: PropTypes.object.isRequired\n    };\n\n    // tslint:disable-next-line no-any\n    static async getInitialProps (ctx: any) {\n      const thing: any = '';\n      const {\n        Component,\n        router,\n        ctx: { req, res }\n      } = ctx;\n\n      const apollo = initApollo(\n        {},\n        {\n          getToken: () => parseCookies(req).token\n        }\n      );\n\n      ctx.ctx.apolloClient = apollo;\n\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      if (res && res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {};\n      }\n\n      if (typeof window === 'undefined') {\n        // Run all graphql queries in the component tree\n        // and extract the resulting data\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          // tslint:disable-next-line no-console\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo's store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState,\n      };\n    }\n\n    apolloClient: ApolloClient<{}>;\n\n    // tslint:disable-next-line no-any\n    constructor (props: any) {\n      super(props);\n      // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return parseCookies().token;\n        }\n      });\n    }\n\n    render () {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAMA;AANA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAQA;AAEA;AAKA;AAGA;AAAA;AAAA;AADA;AAKA;AAEA;AACA;AAzBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AA2BA;AACA;AA5BA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA4CA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA3CA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAkDA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAyDA;AACA;AACA;AACA;AA5DA;AA8DA;AACA;AA/DA;AAmEA;AAnEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAwEA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AAJA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAJA;AASA;AACA;AApFA;AAAA;AAAA;AAsFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAvFA;AACA;AADA;AAAA;AAGA;AADA;AAuFA;;;;A","sourceRoot":""}